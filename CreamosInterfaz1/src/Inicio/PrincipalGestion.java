/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Inicio;

import Conexion.ConexionBD;
import java.awt.HeadlessException;
import java.awt.Image;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rubén
 */
public class PrincipalGestion extends javax.swing.JFrame {

    /**
     * Creates new form PrincipalGestion
     */
    static String tip;
    static String accion;
    String valor;
    Connection conexion = ConexionBD.conexion();
    DefaultTableModel modelo;
    int seleccion = 0;
    static String nB;
    Elegir e;

    // seleccion = table.getSelectedRow();
    /*
     DefaultTableModel modelo;
    Connection conexion = ConexionBD.conexion();

    public PrincipalUsuario() throws SQLException {
        initComponents();
        modelo = (DefaultTableModel) tabla.getModel();
        rellenoTabla();
        rellenoMarcas();

    }
     */
    public PrincipalGestion() throws SQLException {
        OpcionesEmpresa oe = new OpcionesEmpresa(this, false);//= new OpcionesEmpresa(this , false);
        oe.setVisible(false);
        valor = oe.getValor();
        System.out.println(valor);
        initComponents();
        modelo = (DefaultTableModel) table.getModel();
        rellenarJC(valor);
        rellenarTabla(valor);
        rellenarBotones();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        lbl1 = new javax.swing.JLabel();
        cbMarca = new javax.swing.JComboBox<>();
        btnBuscar = new javax.swing.JButton();
        cbModelo = new javax.swing.JComboBox<>();
        lbl2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnAñadir = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbl1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl1.setText("Marca");

        cbMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMarcaActionPerformed(evt);
            }
        });

        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        cbModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbModeloActionPerformed(evt);
            }
        });

        lbl2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl2.setText("Modelo");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbMarca, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbModelo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl1)
                            .addComponent(lbl2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Título 1", "Título 2"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });

        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(119, 119, 119)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMarcaActionPerformed
        try {
            cbModelo.removeAllItems();
            Statement s = conexion.createStatement();
            int i = 0;
            int num = 0;
            ResultSet rs1 = s.executeQuery("SELECT  mo.Nombre "
                    + "                    FROM  modelo mo , marca ma "
                    + "                    WHERE mo.A_Marca= ma.p_Marca "
                    + "                     AND ma.nombre = '" + cbMarca.getSelectedItem().toString() + "'");
            while (rs1.next()) {
                num++;
            }
            ResultSet query2 = s.executeQuery("SELECT  mo.Nombre "
                    + "                    FROM  modelo mo , marca ma "
                    + "                    WHERE mo.A_Marca= ma.p_Marca "
                    + "                     AND ma.nombre = '" + cbMarca.getSelectedItem().toString() + "'");
            String[] modelos = new String[num];

            while (query2.next()) {
                //System.out.println(" " + query.getString(1));
                modelos[i] = query2.getString(1);
                i++;

            }
            for (int j = 0; j < modelos.length; j++) {
                //System.out.println(marcas[j]);
                cbModelo.addItem(modelos[j]);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbMarcaActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        seleccion++;
        try {
            System.out.println(modelo.getRowCount());

            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.removeRow(i);
                i -= 1;

            }
            String n = valor.toLowerCase();
            Statement s = conexion.createStatement();
            System.out.println(valor);
            if (valor == "Pieza") {
                System.out.println(cbMarca.getSelectedItem().toString());
                Object nuevaFila[] = {"Pieza", "Tipo"};
                modelo.setColumnIdentifiers(nuevaFila);
                ResultSet rs = s.executeQuery("SELECT  mo.Nombre ,ma.Nombre "
                        + "                    FROM pieza mo , tipo ma "
                        + "                    WHERE mo.A_Tipo = ma.P_Tipo "
                        + "                    AND ma.Nombre= '" + cbMarca.getSelectedItem().toString() + "'");

                while (rs.next()) {
                    Object[] fila = new Object[2];
                    for (int i = 0; i < 2; i++) {
                        fila[i] = rs.getObject(i + 1);
                    }
                    modelo.addRow(fila);
                }
            } else {
                if (valor == "Marca") {
                    Object nuevaFila[] = {"Marca", "Modelo", "Año de Salida", "Año de final de fabricacion"};
                    modelo.setColumnIdentifiers(nuevaFila);
                    System.out.println(cbMarca.getSelectedItem().toString());
                    ResultSet rs = s.executeQuery("SELECT  ma.Nombre , mo.Nombre , mo.AnoSalida , mo.AnoExtincion "
                            + "                    FROM modelo mo , marca ma "
                            + "                    WHERE mo.A_Marca = ma.P_Marca "
                            + "                    AND ma.Nombre= '" + cbMarca.getSelectedItem().toString() + "' "
                            + "                    AND mo.Nombre LIKE '%" + cbModelo.getSelectedItem().toString() + "%'");

                    while (rs.next()) {
                        Object[] fila = new Object[4];
                        for (int i = 0; i < 4; i++) {
                            fila[i] = rs.getObject(i + 1);
                        }
                        modelo.addRow(fila);
                    }
                }
                if (valor == "Recambio") {

                    //System.out.println(cbMarca.getSelectedItem().toString());
                    Object nuevaFila[] = {"Recambio", "Marca", "Modelo", "Desguace", "Cantidad disponible"};
                    modelo.setColumnIdentifiers(nuevaFila);
                    ResultSet rs = s.executeQuery("SELECT p.Nombre as Recambio, ma.Nombre as Marca, mo.Nombre as Modelo, d.Nombre as Desguace, r.CantidadDisponible as Cantidad\n"
                            + "FROM pieza p , modelo mo , marca ma , desguace d , recambio r\n"
                            + "WHERE \n"
                            + "    r.A_Pieza=p.P_Pieza\n"
                            + "AND\n"
                            + "    mo.P_Modelo=r.A_Modelo\n"
                            + "AND \n"
                            + "    ma.P_Marca = mo.A_Marca\n"
                            + "AND \n"
                            + "    d.P_Desguace=r.A_Desguace\n"
                            + "                 ");

                    while (rs.next()) {
                        Object[] fila = new Object[5];
                        for (int i = 0; i < 5; i++) {
                            fila[i] = rs.getObject(i + 1);
                        }
                        modelo.addRow(fila);
                    }
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(PrincipalUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
        
        setAccion("Añadir");
        if (valor == "Pieza") {
            setTipo(valor);
        }
        if (valor == "Marca") {
            setTipo(valor);
        }
        if (valor == "Recambio") {
            setTipo(valor);
        }
        try {
            e = new Elegir(this, true);
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }
        e.setVisible(true);
    }//GEN-LAST:event_btnAñadirActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        
    }//GEN-LAST:event_tableMouseClicked

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        setAccion("Modificar");
        if (valor == "Pieza") {
            setTipo(valor);
        }
        if (valor == "Marca") {
            setTipo(valor);
        }
        if (valor == "Recambio") {
            setTipo(valor);
        }
        try {
            e = new Elegir(this, true);
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }
        e.setVisible(true);
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        int row = table.getSelectedRow();
        Object end = modelo.getValueAt(row, 0);
        System.out.println(end.toString());
        try {
            eliminar(end.toString());
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void cbModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbModeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbModeloActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PrincipalGestion().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(PrincipalGestion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox<String> cbMarca;
    private javax.swing.JComboBox<String> cbModelo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl2;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    public static String getTipo() {
        return tip;
    }

    public static void setTipo(String tipo) {
        PrincipalGestion.tip = tipo;
    }

    public static String getAccion() {
        return accion;
    }

    public static void setAccion(String accion) {
        PrincipalGestion.accion = accion;
    }

    public static String getNombre() {
        return nB;
    }

    public static void setNombre(String fila) {
        PrincipalGestion.nB = fila;
    }

    public void rellenarJC(String n) throws SQLException {
        // System.out.println("-/" + valor);

        if (n == "Marca") {
            btnEliminar.setVisible(false);
            lbl1.setText(n);
            lbl1.setText("Modelo");
            int i = 0;
            int num = 0;
            Statement s = conexion.createStatement();
            ResultSet rs = s.executeQuery("SELECT  ma.Nombre "
                    + "                    FROM  marca ma ");
            while (rs.next()) {
                num++;
            }
            ResultSet query = s.executeQuery("SELECT  ma.Nombre "
                    + "                    FROM  marca ma ");
            String[] marcas = new String[num];

            while (query.next()) {
                //System.out.println(" " + query.getString(1));
                marcas[i] = query.getString(1);
                i++;

            }
            for (int j = 0; j < marcas.length; j++) {
                //System.out.println(marcas[j]);
                cbMarca.addItem(marcas[j]);
            }

        }
        //
        if (n == "Pieza") {
            btnEliminar.setVisible(false);
            cbModelo.setVisible(false);
            lbl2.setVisible(false);
            //
            lbl1.setText("Tipo");
            int i = 0;
            int num = 0;
            Statement s = conexion.createStatement();
            ResultSet rs = s.executeQuery("SELECT  ma.Nombre "
                    + "                    FROM tipo ma ");
            while (rs.next()) {
                num++;
            }
            ResultSet query = s.executeQuery("SELECT  ma.Nombre "
                    + "                    FROM  tipo ma ");
            String[] marcas = new String[num];

            while (query.next()) {
                //System.out.println(" " + query.getString(1));
                marcas[i] = query.getString(1);
                i++;

            }
            for (int j = 0; j < marcas.length; j++) {
                //System.out.println(marcas[j]);
                cbMarca.addItem(marcas[j]);
            }

        }
        if (n == "Recambio") {
            jPanel3.setVisible(false);
        }

    }

    public final void rellenarTabla(String n) throws SQLException {
        Statement s = conexion.createStatement();
        //n = n.toLowerCase();
        System.out.println(n);
        if (n == "Pieza") {
            Object nuevaFila[] = {"Tipo", "Pieza"};
            modelo.setColumnIdentifiers(nuevaFila);
            ResultSet rs = s.executeQuery("SELECT  ma.Nombre , mo.Nombre "
                    + "                    FROM tipo mo, pieza ma"
                    + "                    WHERE mo.P_Tipo=ma.A_Tipo");

            while (rs.next()) {

                Object[] fila = new Object[2];
                for (int i = 0; i < 2; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modelo.addRow(fila);
            }
        } else {
            if (n == "Marca") {
                Object nuevaFila[] = {"Marca ", "Modelo"};
                modelo.setColumnIdentifiers(nuevaFila);
                ResultSet rs = s.executeQuery("SELECT  ma.Nombre , mo.Nombre "
                        + "                    FROM marca ma , modelo mo "
                        + "                     WHERE ma.P_Marca = mo.A_Marca");

                while (rs.next()) {

                    Object[] fila = new Object[2];
                    for (int i = 0; i < 2; i++) {
                        fila[i] = rs.getObject(i + 1);
                        //System.out.println("file: " + fila[i]);
                    }
                    modelo.addRow(fila);
                }
            }
            if (n == "Recambio") {
                Object nuevaFila[] = {"Recambio", "Marca", "Modelo", "Desguace", "Cantidad disponible"};
                modelo.setColumnIdentifiers(nuevaFila);

                ResultSet rs = s.executeQuery("SELECT r.* \n"
                        + "FROM recambio r, pieza p, modelo mo , marca ma, desguace d, motor m\n"
                        + "WHERE r.`A_Motor`=m.`P_Motor`\n"
                        + "AND r.`A_Pieza`=p.`P_Pieza`\n"
                        + "AND r.`A_Desguace`=d.`P_Desguace`\n"
                        + "AND m.`A_Modelo`=mo.`P_Modelo`\n"
                        + "AND mo.`A_Marca`=ma.`P_Marca`");
                System.out.println(rs);
                while (rs.next()) {
                    Object[] fila = new Object[5];
                    for (int i = 0; i < 5; i++) {
                        fila[i] = rs.getObject(i + 1);
                    }
                    modelo.addRow(fila);
                }

            }
        }

    }

    public void eliminar(String dato) throws SQLException {
        //MODIFICAR
        String n = valor.toLowerCase();
        Statement s = conexion.createStatement();
        String eliminar;
        int p = 0;

        ResultSet rs = s.executeQuery("SELECT P_Recambio FROM recambio WHERE Nombre='" + dato + "' ");
        while (rs.next()) {
            p = rs.getInt(1);
            System.out.println(p);
        }
        /*String delete = "DELETE FROM recambio WHERE recambio.P_Recambio = "+p;
        s.executeUpdate(delete);*/
    }

    public void rellenarBotones() {
        int alturaIcon = 30;
        int anchuraIcon = 30;
        ImageIcon añadir = new ImageIcon("iconos/añadir.png");
        ImageIcon añadirDef = new ImageIcon(añadir.getImage().getScaledInstance(anchuraIcon, alturaIcon, Image.SCALE_DEFAULT));

        ImageIcon modificar = new ImageIcon("iconos/modificar.png");
        ImageIcon modificarDef = new ImageIcon(modificar.getImage().getScaledInstance(anchuraIcon, alturaIcon, Image.SCALE_DEFAULT));

        ImageIcon eliminar = new ImageIcon("iconos/eliminar.png");
        ImageIcon eliminarDef = new ImageIcon(eliminar.getImage().getScaledInstance(anchuraIcon, alturaIcon, Image.SCALE_DEFAULT));

        ImageIcon buscar = new ImageIcon("iconos/buscar.png");
        ImageIcon buscarDef = new ImageIcon(buscar.getImage().getScaledInstance(anchuraIcon, alturaIcon, Image.SCALE_DEFAULT));

        btnAñadir.setIcon(añadirDef);
        btnModificar.setIcon(modificarDef);
        btnEliminar.setIcon(eliminarDef);
        btnBuscar.setIcon(buscarDef);
    }

}
